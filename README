
  ##############################################
	                 ccbuild
        A strict developer's build utility
				
  	  by A. Bram Neijt <bneijt@gmail.com>
  ##############################################

See INSTALL for installation instructions.

Thank you for downloading ccbuild!


=== Documentation
All documentation can be found in the doc directory. If you want to hack ccbuild, don't forget to run doxygen first.
Although the manual is currently not installed, a precompiled version can be found here: doc/debiandoc/ccbuild.1
You can also use the online versions of these documents via the homepage, most easily found using 
  http://ccbuild.sourceforge.net


=== Program usage

The program is ment to be run in the same directory as your main program resides.
For ccbuild self, this is the src directory.
The default behaviour of ccbuild is to find any sourcefile containing an "int main" function and start compiling it.

If the manual is not installed, use: man ./doc/debiandoc/ccbuild.1

see ccbuild -h for more information....
For more, and current, information: see http://ccbuild.sourceforge.net


=== Directories
./src     The main source tree of ccbuild
./doc     Documentation
./tools   Currently contains only a one-liner to run dot on .dot files.
./test    A collection of class testing programs, not really usefull.

== Examples of use
* Compile for debugging and development: ccbuild
* When recompiling for benchmark (force recompile, use -O3): 
       ccbuild -f --args -O3
* Generate a Makefile for a friend developer, who hasn't got ccbuild: ccbuild makefile > Makefile
* Look at the dependencies for you program(s): ccbuild deps
* Graph the dependencies: ccbuild dot; dotty *.dot
* Clean up the generated .o files for all local programs: ccbuild clean
* Remove all 'o' directories and .gch files, before making a backup or release: 
        ccbuild distclean

== DON'T DO THIS WHEN USING CCBUILD
These are very obvious, but just to overcome any problems that might occur.

The following is a list of things you shouldn't do when using ccbuild:
* Place important documents or sources in a directory called "o" within your
  source tree. This might be removed when calling "ccbuild distclean".
* Don't mix extensions for files with the same basename. So don't place
  a file called "main.cc" in the same directory as "main.cpp" because the
  objects in the o directory won't be seperated.
* Expect any warrenty of any kind.

== Hacking the code, possible start-up problems
- Flex scanner must be generated, use:
    rm src/SourceScanner/yylex.cc; make -f Makefile.human src/SourceScanner/yylex.cc
  Use this if the compiler complains about something with SourceScanner
- If the compiler complains about FFB::Process constructor called incorrectly,
  make sure you have libbobcat 2.02.03 or higher.

