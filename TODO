
The features that may set of a new release and things to look out for:
  - Update, freshen, the tree command output
	- Enable a seperate version of wordexp / write my own.
  - Update Filesystem/cwd.cc to correctly work on cygwin.
  - Use __CYGWIN__ to exclude wordexp usage
  -  Write documentation on the ordering of library linking arguments.
      Showing that global header usage influences this and that it's
      a real problem with a solution in ccResolutions (force sequence
      by placing both libraries in both header resolution lines).
  -  Lib support in A-A-P and Makefiles.
  -  Make argument identification configurable using a configuration file.
  -  Take a look at source-header separation issue for library creation.
  -  Allow object output rebasing: output object files to a directory
     (or directory heirarchy) not in the source tree.
      This can be used when sources are read-only.
  ?  Multiprocessing support. (use ccbuild makefile;make -l20 if needed)
      (make can already do this for us, if needed. A-A-P probably too)
  ?? Time skew detection (warn when times are in the future/craeted time not updated)
  ?  Environment variables: CXXFLAGS, LDFLAGS, CXX etc. Currently, most have
     already got program flags.

Also see the list of inline TODO's generated by "sh tools/todo.sh"


Hee Bram,

Een tree zou ik op zich nog wel cool vinden ja, ik weet niet zeker hoe
'af' die feature al was. Verder zou het ook leuk zijn als die in xml
output kon. Ik heb zelf laatst ook een kleine wijziging aangebracht aan
ccbuild, namelijk dat als je 'ccbuild <source>' doet, dat hij dan
automatisch 'build' ipv een fout geeft over het commando dat niet
bestaat.

Een andere feature zou wat mij betreft gedistribueerd compilen zijn
(threaded, distcc, fork) zonder het hoeven maken van een makefile. Ook
zou ik het handig vinden als er betere support voor libraries zou zijn
(het maken van shared libraries, het kunnen linken tegen delen van je
project die als static library gebuild moeten worden). Een laatste ding
wat ik msischien handig zou vinden, is een optie om ccbuild een enkele
object file te laten genereren per class (bv door eerst alle .cc
estanden aan elkaar te catten). Dit is bv handig op systemen bij KI waar
IO duur is, en met veel kleine bestandjes duurt het een stuk langer.

Dit zijn zo'n beetje de dingen waar ik op dit moment aan kan denken.
Oja, één ander ding, het is mij nooit duidelijk waar ik nou compiler
flags kan specificeren en waar linker flags in ccResolutions (ook het
expliciet moeten specificeren van includes in ccResolutions die geen
speciale compiler argumenten nodig hebben vind ik onhandig).

