########
# A-A-P rules generated by ccbuild version 2.0.0
# For more information visit: http://www.logfish.net/pr/ccbuild/
#
# To add extra build information, use Extra(Libs|Include|Define)For<Program basename>
# For example: ExtraLibsForCcbuild = "-L/home -lmyhome"
########


IncludeForCcbuild = $?CcbuildDefaultIncludes $?GeneratedIncludeForCcbuild $?ExtraIncludeForCcbuild

# Defines for src/ccbuild.cc
GeneratedDefineForCcbuild = \
	"-DVERSION=\"2.0.0\""

DefineForCcbuild = $?GeneratedDefineForCcbuild $?ExtraDefineForCcbuild

# Library flags for src/ccbuild.cc
GeneratedLibsForCcbuild = \
	"-lgomp"
	"-lgnutls-openssl"
	"-lbobcat"

LibsForCcbuild = $?GeneratedLibsForCcbuild $?ExtraIncludeForCcbuild
# Sorted list of used global headers
GlobalHeadersForCcbuild = \
	"FlexLexer.h"
	"algorithm"
	"bobcat/process"
	"bobcat/user"
	"boost/circular_buffer.hpp"
	"boost/lexical_cast.hpp"
	"cassert"
	"cstdio"
	"cstdlib"
	"cstring"
	"ctime"
	"errno.h"
	"features.h"
	"fstream"
	"functional"
	"getopt.h"
	"glob.h"
	"gnutls/openssl.h"
	"inttypes.h"
	"iomanip"
	"iosfwd"
	"iostream"
	"iterator"
	"map"
	"numeric"
	"omp.h"
	"set"
	"sstream"
	"stack"
	"stddef.h"
	"string"
	"sys/stat.h"
	"sys/time.h"
	"sys/types.h"
	"sys/utsname.h"
	"typeinfo"
	"unistd.h"
	"utility"
	"vector"

# Configuration generation (use by including config/basename.hh in your program)
ConfigurationFilenameForCcbuild ?= src/config/ccbuild.hh
$ConfigurationFilenameForCcbuild :
	:conf init
	_conf.INCLUDE += $IncludeForCcbuild
	:conf language C++
	:conf header {required} $GlobalHeadersForCcbuild
	:touch {exist} `os.path.dirname(_no.ConfigurationFilenameForCcbuild)` {directory}
	:conf write header $ConfigurationFilenameForCcbuild
CLEANFILES += $ConfigurationFilenameForCcbuild

:program src/ccbuild
	{ comment = "ccbuild 2.0.0 generated program recipe for src/ccbuild.cc"}
	{ var_LIBS = $LibsForCcbuild}
		: 
	{ var_INCLUDE = $IncludeForCcbuild}
	{ var_DEFINE = $DefineForCcbuild}

	"src/ccbuild.cc"
	"src/MD5Info/statics.cc"
	"src/MD5Info/save.cc"
	"src/MD5Info/old.cc"
	"src/MD5Info/load.cc"
	"src/MD5Info/hashFilenameFor.cc"
	"src/MD5Info/getInstance.cc"
	"src/MD5Info/destroy.cc"
	"src/MD5Info/contentHash.cc"
	"src/MD5Info/MD5Info.cc"
	"src/options/statics.cc"
	"src/system/uname.cc"
	"src/system/trimmed.cc"
	"src/system/trim.cc"
	"src/system/system.cc"
	"src/system/statics.cc"
	"src/system/sleep.cc"
	"src/system/resolveTest.cc"
	"src/system/projectName.cc"
	"src/system/parseArguments.cc"
	"src/system/mkdtemp.cc"
	"src/system/md5.cc"
	"src/system/makefileForAll.cc"
	"src/system/makefileFor.cc"
	"src/system/localSourcesInto.cc"
	"src/system/lib.cc"
	"src/system/inspect.cc"
	"src/system/icmake.cc"
	"src/system/exit.cc"
	"src/system/dotgraphForAll.cc"
	"src/system/dotgraphFor.cc"
	"src/system/distclean.cc"
	"src/system/destroy.cc"
	"src/system/depsFor.cc"
	"src/system/collectTargets.cc"
	"src/system/clean.cc"
	"src/system/check.cc"
	"src/system/changeTo.cc"
	"src/system/buildAll.cc"
	"src/system/build.cc"
	"src/system/batchCompile.cc"
	"src/system/addArguments.cc"
	"src/system/aapForAll.cc"
	"src/system/aapFor.cc"
	"src/string/toUpper.cc"
	"src/string/replace.cc"
	"src/globallocks/statics.cc"
	"src/globals/statics.cc"
	"src/globals/indexoperator.cc"
	"src/globals/globals.cc"
	"src/globals/getInstance.cc"
	"src/globals/destroy.cc"
	"src/fileSystem/touch.cc"
	"src/fileSystem/rmIfExists.cc"
	"src/fileSystem/rmDirectoryIfExists.cc"
	"src/fileSystem/rename.cc"
	"src/fileSystem/recursiveGlobDirectoriesInto.cc"
	"src/fileSystem/newer.cc"
	"src/fileSystem/modTime.cc"
	"src/fileSystem/isReadable.cc"
	"src/fileSystem/isDirectory.cc"
	"src/fileSystem/globSourceFilesInto.cc"
	"src/fileSystem/globInto.cc"
	"src/fileSystem/globFilesInto.cc"
	"src/fileSystem/globDirectoriesInto.cc"
	"src/fileSystem/fileName.cc"
	"src/fileSystem/fileExists.cc"
	"src/fileSystem/ensureDirectory.cc"
	"src/fileSystem/directoryName.cc"
	"src/fileSystem/cwd.cc"
	"src/fileSystem/cleanPath.cc"
	"src/fileSystem/baseName.cc"
	"src/fileSystem/absolutePath.cc"
	"src/problem/problem.cc"
	"src/Resolver/statics.cc"
	"src/Resolver/resolveInto.cc"
	"src/Resolver/resolve.cc"
	"src/Resolver/loadIfExists.cc"
	"src/Resolver/getInstance.cc"
	"src/Resolver/expand.cc"
	"src/Resolver/destroy.cc"
	"src/Resolver/Resolver.cc"
	"src/Compiler/statics.cc"
	"src/Compiler/splitInto.cc"
	"src/Compiler/precompileCommand.cc"
	"src/Compiler/precompile.cc"
	"src/Compiler/operator_add.cc"
	"src/Compiler/linkCommand.cc"
	"src/Compiler/link.cc"
	"src/Compiler/libCommand.cc"
	"src/Compiler/lib.cc"
	"src/Compiler/countFirstLinkerArguments.cc"
	"src/Compiler/compileCommand.cc"
	"src/Compiler/compile.cc"
	"src/Compiler/cls.cc"
	"src/Compiler/ar.cc"
	"src/Compiler/addObject.cc"
	"src/Compiler/addArgument.cc"
	"src/sources/statics.cc"
	"src/sources/sources.cc"
	"src/sources/reloadStaleSources.cc"
	"src/sources/indexoperator.cc"
	"src/sources/getInstance.cc"
	"src/sources/erase.cc"
	"src/sources/destroy.cc"
	"src/source/upToDate.cc"
	"src/source/stale.cc"
	"src/source/source.cc"
	"src/source/setType.cc"
	"src/source/scan.cc"
	"src/source/reload.cc"
	"src/source/producesOutput.cc"
	"src/source/outputFilename.cc"
	"src/source/markAsDone.cc"
	"src/source/isObjectTarget.cc"
	"src/source/isLocalHeader.cc"
	"src/source/isLibTarget.cc"
	"src/source/isInternalHeader.cc"
	"src/source/isHeader.cc"
	"src/source/isBinTarget.cc"
	"src/source/hasSourceExtension.cc"
	"src/source/genDeps.cc"
	"src/source/directory.cc"
	"src/source/directDeps.cc"
	"src/source/dependencies.cc"
	"src/source/changed.cc"
	"src/source/buildObjectTarget.cc"
	"src/source/buildHeader.cc"
	"src/source/buildBinTarget.cc"
	"src/source/build.cc"
	"src/source/basenameWithoutExtension.cc"
	"src/SourceScanner/yylex.cc"
	"src/SourceScanner/storeLocal.cc"
	"src/SourceScanner/storeIgnore.cc"
	"src/SourceScanner/storeGlobal.cc"
	"src/SourceScanner/includes.cc"
	"src/SourceScanner/hasMainFunction.cc"
	"src/SourceScanner/hasDefine.cc"
	"src/SourceScanner/SourceScanner.cc"
	"src/arguments/values.cc"
	"src/arguments/value.cc"
	"src/arguments/statics.cc"
	"src/arguments/outputOptions.cc"
	"src/arguments/initialize.cc"
	"src/arguments/getInstance.cc"
	"src/arguments/flagged.cc"
	"src/arguments/destroy.cc"
	"src/arguments/clear.cc"
	"src/arguments/arguments.cc"

