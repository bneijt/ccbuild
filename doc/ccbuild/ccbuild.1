.\" Automatically generated by Pandoc 3.2
.\"
.TH "ccbuild" "1" "August 8, 2014" "General Commands Manual" ""
.SH NAME
ccbuild \[em] Strict C++ developer\[cq]s build utility
.SH SYNOPSIS
\f[B]ccbuild\f[R] options [command]
.SH DESCRIPTION
\f[B]ccbuild\f[R] is a build utility that will read C++ source.
It collects all source surrounding your local includes and links these
to your main program.
Global include statements (#include ) are used to make sure the compiler
gets the\[ga] right arguments.
The link between com‐ piler arguments and these global includes is made
using configuration files.
These files contain lines with a global header file name and the extra
arguments the compiler needs to find and use this file.
The file name and arguments are separated by tab character(s) or a
space.
ccbuild reads these configuration files in order.
Only the first men‐ tion of a global header file in these files is used.
Usually only \f[B]./ccResolutions\f[R] is used, but there are more
possibilities.
See the sec‐ tion FILES for more information.
.PP
\f[B]ccbuild\f[R] will follow any local include (#include
\[lq]something.hh\[rq]) to try to find more source code to compile.
To keep \f[B]ccbuild\f[R] from following up on an include statement,
separate the #\-sign and the include statement by a single space (\[lq]#
include\[rq]).
.SH COMMANDS
.TP
build [filename.cc]
Build everything or the given source.
.TP
lib [filename.cc]
Collect all objects into an archive.
If a version is given, using \[en]pversion, then a shared library is
also build with symbolic links.
This currently forces the \-fPIC argument addition.
The name of your library is given the name of the current directory or
it\[cq]s parent when the current directory is called src.
.RS
.PP
Example: create an empty .cc file which simply includes all the local
libraries, run ccbuild \[en]pversion 0.0.1 lib that‐ file.cc
.RE
.TP
clean [filename.cc]
Clean everything or the given source.
.TP
distclean
Recursively remove all \[lq]o\[rq] directories after removing all .md5
and .o files therein.
And removes all .gch files.
.TP
deps [filename.cc]
List all files this source depends on.
It lists three lines separated by empty lines.
The first contains the local dependencies, the second the ignored
headers (for the file) and the last contains all global includes needed.
.TP
dot [filename.cc]
Generate dot graph files for sources on the stdout.
If no source file name is given, then for all binary targets in the
local directory a .dot file will be created.
If the \[en]verbose flag is used the dot graph will also contain all
object file names and their dependencies and lists of ignored headers.
Objects will be coloured light grey, binary targets light blue, ignored
headers by a red line.
.TP
makefile [filename.cc]
Generate a Makefile on stdout.
If no file name is given, an all rule will be generated.
Otherwise only the rules for the given file are generated.
.TP
aap [filename.cc]
Generate an A\-A\-P file on stdout.
If the file name is not given, an \[lq]all\[rq] rule will be added and
all local binary tar‐ gets will be listed.
.TP
check [filename.cc]
Display source status and file name on the stdout.
Status and source path are separated with a tab character.
Status is either \[lq]old\[rq] or \[lq]ok\[rq].
When the \[en]verbose flag is used, another tab separated column will be
inserted containing a two letter file type ccbuild identifies it as.
This file type is \[lq]bt\[rq], \[lq]ot\[rq], \[lq]ih\[rq] or
\[lq]hh\[rq] for binary target, object target, internal header and
header respectively.
.TP
icmake [filename.cc]
icmake slave mode.
This will output the used directories with one directory per line.
If a CLASSES file already exists, it will only output the class
directories not mentioned in the CLASSES file.
If \[en]verbose is given, all classes will be listed.
The output will not contain directories with only header files.
Updating the CLASSES is typically done by run‐ ning: ccbuild icmake >>
CLASSES
.TP
resolve [filename.cc]
Print all unresolved globals onto the stdout followed by a tab
character.
These can be appended to the ccResolutions file using: ccbuild resolve
>> ccResolutions .
.TP
md5 [filename.cc]
MD5 sum all sources needed to compile all binary targets, or the given
source on stdout.
.SH OPTIONS
Options are used to change the behaviour of the commands.
Some options are useless for some commands.
.TP
\-f \[en]force\-update
Update everything by labelling everything as old.
.TP
\-h \[en]help
Get a list of options and commands.
.TP
\[en]gnutouch
Touch files part of the GNU software standard.
They will be touched in ../ except when there is a directory called src
in the current directory, then the current directory will be used.
This will touch AUTHORS, NEWS, README, INSTALL, COPYING, TODO and
ChangeLog.
.TP
\-s \[en]no\-act
Simulate, don\[cq]t really execute any writing commands.
.TP
\[en]compiler cmd
Set the compiler command.
The default is \[lq]g++\[rq].
.TP
\-a \[en]args argument
Set these default compiler arguments, removing the standard default
arguments (\[lq]\-Wall \-g\[rq]).
Multiple uses of this option are concate‐ nated with spaces.
.TP
\-C path
Change directory before anything else.
.TP
\-p \[en]precompile\-ih
Pre\-compile only internal headers.
This requires g++ version 3.4 up.
.TP
\[en]precompile\-all
Pre\-compile both internal headers and normal headers.
This requires g++ version 3.4 up.
When you use internal headers, this will only slow you down.
However, when you don\[cq]t use internal headers, this pre\-compilation
is all you\[cq]ve got.
.TP
\[en]brute
Continue on compiler errors.
.TP
\[en]md5
Use MD5 hashes to check for file changes.
The hashes are store in \[lq]o/filename.md5\[rq] for every file.
These sums are only stored after a clean exit from ccbuild (last line
showing \[lq][WR] MD5 data\[rq]) or a successful compilation.
.TP
\-I path
Add this path to the local include search path of ccbuild and the
compiler (which will receive the same argument).
.TP
\[en]recursive\-include path
This is just like \-I, but for the given path and every non\-empty
directory with a name other then \[lq]o\[rq].
Make sure you do not come to depend on this behaviour, that would be bad
practice.
.TP
\-l \[en]highlight
Highlight the output of the compiler using a red terminal colour.
.TP
\[en]xof \[en]exec\-on\-fail command
Execute this command when the command (pre)compilation returns any‐
thing but 0.
The first argument given to the command will be rela‐ tive path to the
file the command was executed on (which is either a C++ source or
header).
If you don\[cq]t want to use the file name, you can append an echo
command like \[lq]sleep 2; echo\[rq].
.TP
\[en]xop \[en]exec\-on\-pass cmd
This is the same as \[en]exec\-on\-fail, except it only works when the
command returns 0.
The first argument given to the command will be the relative path to the
file the command was executed on.
.TP
\[en]clearpc
Clear the screen just before executing the command (clear per com‐
mand).
.TP
\[en]append cmd
Append this to every command.
This can be used to redirect output or set up pipes for compiler output.
.TP
\[en]loop
Loop the system with one second intervals.
This only works for the build command at the moment.
All sources who are touched will be reloaded.
If a file is removed, the whole source tree is reloaded.
.TP
\[en]nodefargs
Do not read the first line of ./ccResolutions for extra arguments.
.TP
\[en]nodefres
Do not load any ccResolutions files outside of ./ccResolutions.
This can be used to create a monolithic ccResolutions file or dis‐ cover
your project\[cq]s dependencies with the resolve command.
.TP
\[en]addres filename
Load the given resolution file before any other.
.TP
\[en]pversion version
Set the program version you are working on to version.
This is cur‐ rently only used for the library command.
When defined, the library command can make a shared object (.so) and
symbolic links by using the version number.
It should not contain any file system special characters like slashes.
.TP
\[en]ar
Archive the objects before linking.
This should reduce the binary size because it leaves out unused objects.
.TP
\[en]verbose
Show commands and produce more output for dot and check commands.
.TP
\-V \[en]version
Output version number on stdout and copyright/license on stderr.
.TP
\[en]xml
Output in XML where supported.
Currently this is only the check command.
.TP
\[en]nowarn
Leave out most warnings.
.TP
\[en]batch
Compile a batch of files with one g++ call before any other compi‐
lation.
This effectively disables any multi\-threading, but may speed things up
for larger collections of small files.
This process involves creating a temporary directory in
/tmp/ccbuild_batch.XXXX.
The exact behaviour of this option may change in the future based on
performance results and user experience.
.TP
\-j number_threads
Set the maximum number of threads used during build.
Only available when OpenMP is enabled.
.SH RESOLUTION CONFIGURATION
The ccResolutions file links global headers to compiler arguments.
Every line should be either empty, start with a comment character
\[lq]#\[rq] or contain a con‐ figuration line.
A configuration line contains the name of the global header, followed by
one or more tab characters and then the additional argu‐ ments needed
when a source depends on this global header.
The arguments are POSIX shell expanded.
.PP
If the first line of the ccResolutions file starts with \[lq]#&\[rq],
the rest of this line is shell expanded and used and appended to the
argument list of \f[I]ccbuild\f[R].
.SH EXAMPLES
Examples of program use.
.TP
ccbuild resolve >> ccResolutions
Add any of the unknown global headers to the ccResolutions file.
You can also use \[en]nowarn to keep ccbuild quiet, but you will have to
think twice if you get compilation errors.
.TP
ccbuild \[en]brute
Get back to development after a distclean.
This will update as much objects as will compile.
Which will allow you to focus on the errors in the next ccbuild call.
.TP
ccbuild \-p \[en]compiler `g++\-3.4' \[en]args \-Wall \[en]args `\-Wextra \-ansi'
Precompile internal headers using g++\-3.4 and highlight all com‐ piler
output (\-l).
Also give all compiler commands the parameters \[lq]\-Wall \-Wextra
\-ansi\[rq].
.TP
ccbuild \-f \[en]args \-O3
Recompiling your project for benchmarking tests.
Forces the update of all code (\-f) and sets the compiler argument to
\-O3.
.TP
ccbuild \[en]verbose dot; dotty *.dot
Graph the dependencies for all programs with colours.
Then view these using dotty.
This can help you to discover irregular depen‐ dencies and what test
programs use.
.TP
ccbuild \[en]xof `gedit'
Try to compile the program and open the first file that does not compile
correctly.
Open all error producing sources in gedit.
Very useful for when you change the interface of a class.
.TP
ccbuild \[en]compiler distcc \-j 20
Use 20 distcc compilers to compile the project.
.SH FILES
Configuration files used by ccbuild
.TP
\&./ccResolutions[.USERNAME,.HOSTNAME,.KERNEL_NAME,.MACHINE,]
Local configuration which is project specific.
It will load the first existing file of: ./ccResolutions.USERNAME,
\&./ccResolu‐ tions.HOSTNAME, ./ccResolutions.KERNEL_NAME, ./ccResolu‐
tions.MACHINE, ./ccResolutions.
Hostname, kernel name and machine can be found with uname \-nsm.
.TP
\[ti]/.ccbuild/ccResolutions
Global configuration file.
.TP
\[ti]/.ccbuild/ccResolutions.d
The resolution configuration directory.
All files in this directory are considered configuration files.
.SH CAVEATS
Do not place any file into o directories, these will be removed when
using the distclean command.
Also don\[cq]t use files with the same basename, but different C++
extensions, this will give problems with the objects created (for
example \[lq]add.cc\[rq] and \[lq]add.cpp\[rq] in the same directory).
.PP
Currently there is no way to allow one object file to effect the
command\-line parameters of another.
This means that if all objects need a flag, you must use the \[en]args
argument and cannot use a global header resolution line.
Exam‐ ples of these flags that need to be defined everywhere are
\-pthreads, \-mthreads and \-threads.
Please read the g++ manual for more information on usage of flags.
.PP
ccbuild seems to be incompatible with flex 2.5.4.
That version of flex places an int main function in the resulting
scanner and there doesn\[cq]t seem to be a way to stop it from
mentioning it.
The result is that ccbuild will think that the generated scanner is a
test program for your class and won\[cq]t link it into the main program.
A solution is to move to a newer version of flex or find a way to remove
the int main function from the resulting scanner file.
.SH REPORTING BUGS
Report any issue with ccbuild at: https://github.com/bneijt/ccbuild
.SH RESTRICTIONS
ccbuild will not follow or act on any include statements with a single
space between the #\-sign and the include.
So all include statements starting with \[lq]# include\[rq] will be
ignored, all other combinations will be acted on.
This is a feature, not a bug.
In verbose mode (\[en]verbose) these are mentioned as warnings.
.SH SEE ALSO
\f[CR]pkg\-config\f[R](1), \f[CR]dotty\f[R](1), \f[CR]make\f[R](1),
\f[CR]icmake\f[R](1), \f[CR]g++\f[R](1), \f[CR]aap\f[R](1),
\f[CR]svn\f[R](1)
.SH AUTHORS
A. Bram Neijt \c
.MT bneijt@gmail.com
.ME \c.
